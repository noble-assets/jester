// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: query/v1/query.proto

package queryv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/noble-assets/jester/gen/query/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// QueryServiceName is the fully-qualified name of the QueryService service.
	QueryServiceName = "query.v1.QueryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// QueryServiceGetVoteExtentionProcedure is the fully-qualified name of the QueryService's
	// GetVoteExtention RPC.
	QueryServiceGetVoteExtentionProcedure = "/query.v1.QueryService/GetVoteExtention"
)

// QueryServiceClient is a client for the query.v1.QueryService service.
type QueryServiceClient interface {
	GetVoteExtention(context.Context, *connect.Request[v1.GetVoteExtentionRequest]) (*connect.Response[v1.GetVoteExtentionResponse], error)
}

// NewQueryServiceClient constructs a client for the query.v1.QueryService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewQueryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) QueryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	queryServiceMethods := v1.File_query_v1_query_proto.Services().ByName("QueryService").Methods()
	return &queryServiceClient{
		getVoteExtention: connect.NewClient[v1.GetVoteExtentionRequest, v1.GetVoteExtentionResponse](
			httpClient,
			baseURL+QueryServiceGetVoteExtentionProcedure,
			connect.WithSchema(queryServiceMethods.ByName("GetVoteExtention")),
			connect.WithClientOptions(opts...),
		),
	}
}

// queryServiceClient implements QueryServiceClient.
type queryServiceClient struct {
	getVoteExtention *connect.Client[v1.GetVoteExtentionRequest, v1.GetVoteExtentionResponse]
}

// GetVoteExtention calls query.v1.QueryService.GetVoteExtention.
func (c *queryServiceClient) GetVoteExtention(ctx context.Context, req *connect.Request[v1.GetVoteExtentionRequest]) (*connect.Response[v1.GetVoteExtentionResponse], error) {
	return c.getVoteExtention.CallUnary(ctx, req)
}

// QueryServiceHandler is an implementation of the query.v1.QueryService service.
type QueryServiceHandler interface {
	GetVoteExtention(context.Context, *connect.Request[v1.GetVoteExtentionRequest]) (*connect.Response[v1.GetVoteExtentionResponse], error)
}

// NewQueryServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewQueryServiceHandler(svc QueryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	queryServiceMethods := v1.File_query_v1_query_proto.Services().ByName("QueryService").Methods()
	queryServiceGetVoteExtentionHandler := connect.NewUnaryHandler(
		QueryServiceGetVoteExtentionProcedure,
		svc.GetVoteExtention,
		connect.WithSchema(queryServiceMethods.ByName("GetVoteExtention")),
		connect.WithHandlerOptions(opts...),
	)
	return "/query.v1.QueryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case QueryServiceGetVoteExtentionProcedure:
			queryServiceGetVoteExtentionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedQueryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedQueryServiceHandler struct{}

func (UnimplementedQueryServiceHandler) GetVoteExtention(context.Context, *connect.Request[v1.GetVoteExtentionRequest]) (*connect.Response[v1.GetVoteExtentionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("query.v1.QueryService.GetVoteExtention is not implemented"))
}
